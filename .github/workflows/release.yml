name: Release (Linux & Windows)

on:
  push: 
    tags:
      - r/*

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  VUE_APP_SENTRY_DSN: ${{ secrets.VUE_APP_SENTRY_DSN }}
  CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  CSC_LINK: ${{ secrets.CSC_LINK }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    # Cache for Gradle
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Build subprocess
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SUBPROCESS_SENTRY_DSN: ${{ secrets.SUBPROCESS_SENTRY_DSN }}
      run: |
        cd subprocess
        ./gradlew clean build -si
    - name: Build App (Windows & Linux)
      run: |
        npm install --global pnpm || true
        pnpm config set store-dir .pnpm-store
        pnpm install
        pnpm gen:license
        pnpm build --publish always -l --x64 --arm64
    # Upload the subprocess/build/libs/ directory as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: subprocess-jar
        path: subprocess/build/libs/
  build-windows:
    runs-on: windows-latest
    # Only run this job if the previous job was successful
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: subprocess-jar
        path: subprocess/build/libs/
    - name: Build App (Windows)
      run: |
        npm install --global pnpm || true
        pnpm config set store-dir .pnpm-store
        pnpm install
        pnpm gen:license
        pnpm build --publish always -w --x64
  build-macos:
    runs-on: macos-latest
    # Only run this job if the previous job was successful
    needs: 
      - build
      - build-windows
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: subprocess-jar
        path: subprocess/build/libs/
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Build App (MacOS)
      run: |
        npm install --global pnpm || true
        pnpm config set store-dir .pnpm-store
        pnpm install
        pnpm gen:license
        pnpm build --publish always -m --x64 --arm64
  build-overwolf:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: subprocess-jar
          path: subprocess/build/libs/
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Build App (Overwolf)
        env:
          OW_CLI_API_KEY: ${{ secrets.OW_CLI_API_KEY }}
          OW_CLI_EMAIL: ${{ secrets.OW_CLI_EMAIL }}
          DEBUG: true
        run: |
          cp subprocess/build/libs/meta.json overwolf/
          cp subprocess/build/libs/java-licenses.json overwolf/
          npm install --global pnpm || true
          pnpm config set store-dir .pnpm-store
          pnpm install
          pnpm gen:license
          node overwolf/patchManifest.js
          pnpm overwolf:build
          node overwolf/packageOpk.js
          echo "Signing OPK.."
          pnpm ow opk sign -o overwolf/signed.opk overwolf/*.opk
          pnpm ow opk upload -w true overwolf/signed.opk
  release:
    runs-on: ubuntu-latest
    needs: 
      - build
      - build-macos
      - build-overwolf
      - build-windows
    # TODO: Publish to Github and changelogs
    steps:
      - name: Release
        run: echo "Released"