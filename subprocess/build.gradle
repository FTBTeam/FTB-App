import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

import java.time.Instant

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.palantir.git-version" version "0.12.2"
    id "com.github.hierynomus.license" version "0.16.1" apply false
    id "com.dorongold.task-tree" version "2.1.0"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.3"
}

apply plugin: com.hierynomus.gradle.license.LicenseReportingPlugin

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def date = new Date().format('yyyyMMddHHmm')

group = "net.creeperhost"
archivesBaseName = "launcher"
def details = versionDetails()
def branch = (details.branchName ?: (System.getenv("CI_COMMIT_BRANCH") ?: System.getenv("CI_TAGGED_BRANCH"))).replaceAll('/', '-')
version = System.getenv("VERSION_OVERRIDE") ?: (date + "-" + details.gitHash + (branch != 'release' ? "-" + branch : ""))
def webVersion = details.gitHash
def sentryDsn = System.getenv("SUBPROCESS_SENTRY_DSN") ?: ""

repositories {
    mavenLocal()
    maven { url 'https://maven.creeperhost.net' }
    mavenCentral()
    jcenter() // Gradle _Says_ it wont resolve artifacts, but its gone into read-only indefinitely. (JdkUtils uses some libraries from here)
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.covers1624.net/' }
}

dependencies {
    compileOnly files("lib/i4jruntime.jar")

    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-jul:2.17.2'
    implementation 'io.sentry:sentry-log4j2:5.7.4'

    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'

    implementation 'net.creeperhost.minetogether:minetogether-api:1.0.20'

    implementation 'org.apache.tika:tika-core:1.22'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.java-websocket:Java-WebSocket:1.4.0'
    implementation 'com.github.oshi:oshi-core:5.7.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:okhttp-dnsoverhttps:4.9.3'
    implementation 'org.apache.commons:commons-compress:1.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'net.java.dev.jna:jna:5.5.0'
    implementation 'net.java.dev.jna:jna-platform:5.5.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.839'
    implementation('org.apache.maven:maven-artifact:3.8.4') {
        exclude group: 'org.codehaus.plexus' // Not needed for this application.
    }
    implementation 'com.github.pircbotx:pircbotx:2.2'
    implementation 'net.covers1624:Quack:0.4.3.59'
    implementation 'net.covers1624:JdkUtils:0.4.0.14'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.openjdk.nashorn:nashorn-core:15.3'

    implementation 'com.electronwill.night-config:toml:3.6.4'

    implementation 'org.apache.ant:ant-commons-net:1.10.7'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'

    compileOnly 'org.jetbrains:annotations:22.0.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    if (file('debugger').exists()) {
        runtimeOnly project(":debugger")
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    testImplementation 'org.nanohttpd:nanohttpd:2.3.1'
}

test {
    useJUnitPlatform()
}

task processSource(type: Sync) {
    from sourceSets.main.java
    inputs.property 'version', version
    filter(ReplaceTokens, tokens: [APPVERSION: version, WEBVERSION: version, BRANCH: branch, SENTRY: sentryDsn])
    into "$buildDir/src"
}

compileJava {
    options.encoding = "UTF-8"
    dependsOn processSource
    source = processSource.outputs
}

jar.enabled = false
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
    manifest {
        attributes([
                "Specification-Title"   : "Launcher",
                "Specification-Vendor"  : "Creeperhost LTD",
                "Specification-Version" : version,
                "Implementation-Title"  : "CreeperLauncher",
                "Implementation-Version": version,
                "Implementation-Vendor" : "Creeperhost LTD"
        ] as LinkedHashMap, "net/creeperhost/creeperlauncher/")
        attributes 'Multi-Release': 'true'
        attributes 'Main-Class': 'net.creeperhost.creeperlauncher.CreeperLauncher'
    }
}
assemble.dependsOn 'shadowJar'

// TODO make root dir a bare gradle project and subprocess the submodule
project(":web") {
}

def dependencySources = [
        "org.jetbrains:annotations"                : "https://github.com/JetBrains/java-annotations",
        "com.squareup.okio:okio"                   : "https://github.com/square/okio",
        "com.github.oshi:oshi-core"                : "https://github.com/oshi/oshi",
        "net.java.dev.jna:jna-platform"            : "https://github.com/java-native-access/jna",
        "org.apache.commons:commons-compress"      : "https://github.com/apache/commons-compress",
        "org.jetbrains.kotlin:kotlin-stdlib-common": "https://github.com/JetBrains/kotlin/tree/master/libraries",
        "org.java-websocket:Java-WebSocket"        : "https://github.com/TooTallNate/Java-WebSocket",
        "com.squareup.okhttp3:okhttp"              : "https://github.com/square/okhttp",
        "net.java.dev.jna:jna"                     : "https://github.com/java-native-access/jna",
        "org.slf4j:slf4j-api"                      : "https://github.com/qos-ch/slf4j",
        "com.google.code.gson:gson"                : "https://github.com/google/gson",
        "org.jetbrains.kotlin:kotlin-stdlib"       : "https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib",
        "org.apache.tika:tika-core"                : "https://github.com/apache/tika",
        "net.covers1624:Quack"                     : "https://github.com/covers1624/Quack"
]

tasks.register('writeVersion') {
    it.dependsOn 'downloadLicenses'
    doLast {
        def packageJson = new JsonSlurper().parse(file("../package.json"))
        def data = new JsonSlurper().parse(new File("$projectDir/build/reports/license/dependency-license.json"))
        def dependencies = data.get("dependencies")
        def licenses = [:]
        for (obj in dependencies) {
            def value = obj
            licenses.put(value.name as String, [
                    license   : value.licenses.last().name as String,
                    repository: dependencySources.get(value.name.take(value.name.lastIndexOf(":")) as String)
            ])
        }
        file("$projectDir/build/libs/version.json").newWriter().withWriter { w ->
            w << JsonOutput.toJson(
                    [
                            jarVersion    : version,
                            webVersion    : webVersion,
                            publicVersion : packageJson.version,
                            branch        : branch,
                            timestampBuilt: Instant.now().getEpochSecond(),
                            javaLicense   : licenses
                    ]
            )
        }
    }
}
build.dependsOn 'writeVersion'

wrapper {
    gradleVersion = "7.3"
}

idea.project.settings {
    delegateActions {
        // Gradle runners are garbage and break frequently.
        delegateBuildRunToGradle = false
        testRunner = org.jetbrains.gradle.ext.ActionDelegationConfig.TestRunner.PLATFORM
    }
    runConfigurations {
        "Start Backend"(org.jetbrains.gradle.ext.Application) {
            mainClass = "net.creeperhost.creeperlauncher.CreeperLauncher"
            moduleName = "creeperlauncher.main"
            jvmArgs = '-ea '                                             // Enable assertions
            jvmArgs += '-DDownloadTask.debug=true '                      // Enable Quack DownloadAction logging from DownloadTask
            jvmArgs += '-DInstanceLauncher.ProgressTracker.debug=true '  // Enable debug logging for InstanceLauncher's ProgressTracker TODO Log4j markers?
            jvmArgs += '-DInstanceInstaller.debug=true '                 // Enable debug logging for InstanceInstaller.
            jvmArgs += '-DInstanceLauncher.minecraft=ACCEPT '            // Allow Minecraft logging Marker in Log4j.
            jvmArgs += '-DInstanceShareUploader.debug=true '             // Enable debug logging for InstanceShareUploader
            jvmArgs += '-DDNSChain.debug=true '                          // Enable debug logging for DNSChain
            programParameters = '--dev'
        }
    }
}
