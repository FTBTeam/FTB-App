import {
  AccountIsValidHandlerData,
  AccountIsValidHandlerReply,
  AppInitHandlerData,
  AppInitHandlerReply,
  AuthenticateMsProfileHandlerData,
  AuthenticateMsProfileHandlerReply,
  BaseData,
  BrowseInstanceData,
  BrowseInstanceDataReply,
  CancelInstallInstanceData,
  CancelInstallInstanceDataReply,
  DuplicateInstanceHandlerReply,
  DuplicateInstanceHandlerRequest,
  FileHashData,
  FileHashDataReply, GetFtbAccountHandlerReply,
  GetInstanceFoldersHandlerReply,
  GetInstanceFoldersHandlerRequest,
  GetJavasData,
  GetJavasDataReply,
  GetProfilesHandlerReply,
  InstalledInstancesData,
  InstalledInstancesDataReply,
  InstallInstanceData,
  InstallInstanceDataReply, InstanceCategoryHandlerData, InstanceCategoryHandlerReply,
  InstanceConfigureData,
  InstanceConfigureDataReply,
  InstanceDeleteBackupHandlerReply,
  InstanceDeleteBackupHandlerRequest,
  InstanceGetBackupsHandlerReply,
  InstanceGetBackupsHandlerRequest,
  InstanceInstallModData,
  InstanceInstallModDataReply,
  InstanceModsData,
  InstanceModsDataReply,
  InstanceModToggleData,
  InstanceModToggleDataReply,
  InstanceOverrideModLoaderData,
  InstanceOverrideModLoaderDataReply,
  InstanceRestoreBackupHandlerReply,
  InstanceRestoreBackupHandlerRequest,
  InstanceVersionInfoData,
  InstanceVersionInfoDataReply,
  KillInstanceData,
  KillInstanceDataReply,
  LaunchInstanceData,
  LaunchInstanceDataReply,
  MessageClientData,
  ModalCallbackData,
  MoveInstancesHandlerData,
  MoveInstancesHandlerReply,
  PingLauncherData,
  PinInstanceHandlerData,
  PinInstanceHandlerReply,
  PongLauncherData,
  RefreshAuthenticationProfileHandlerData,
  RefreshAuthenticationProfileHandlerReply,
  RemoveProfileHandlerData,
  RemoveProfileHandlerReply,
  SetActiveProfileHandlerData,
  SetActiveProfileHandlerReply,
  SetInstanceArtData,
  SetInstanceArtDataReply,
  SettingsConfigureData,
  SettingsConfigureDataReply,
  SettingsInfoData,
  SettingsInfoDataReply, SignOutFTBAccountHandlerReply,
  StorageGetAllHandlerReply,
  StorageGetHandlerData,
  StorageGetHandlerReply,
  StoragePutHandlerData,
  StoragePutHandlerReply, StoreFtbAccountHandlerData, StoreFtbAccountHandlerReply,
  UninstallInstanceData,
  UninstallInstanceDataReply,
  UpdateInstanceData,
  UploadLogsData,
  UploadLogsDataReply,
  WebRequestData,
  WebRequestDataResponse
} from '@/core/types/javaApi';
import {Nullable} from '@/core/websockets/websocketsApi';
import {ApiEndpoints} from '@/core/types/javaApiEndpoints';

export type EndpointDefinition<Input, Output> = {
  input: Input;
  output: Output;
};

/**
 * Helper method to create type-safe endpoint definitions.
 */
function io<Input, Output>(): EndpointDefinition<Input, Output> {
  return {
    input: {} as Input,
    output: {} as Output
  };
}

// We don't export as nothing needs this. It just helps us infer the type of the endpoints object.
const endpoints = {
  appInit:                        io<AppInitHandlerData, AppInitHandlerReply>(),
  pinInstance:                    io<PinInstanceHandlerData, PinInstanceHandlerReply>(),
  installedInstances:             io<InstalledInstancesData, InstalledInstancesDataReply>(),
  launchInstance:                 io<Nullable<LaunchInstanceData, "cancelLaunch">, LaunchInstanceDataReply>(),
  instanceCategories:             io<Partial<Omit<InstanceCategoryHandlerData, "type" | "requestId" | "secret">> & BaseData, InstanceCategoryHandlerReply>(),
  "instance.kill":                io<KillInstanceData, KillInstanceDataReply>(),
  installInstance:                io<Nullable<InstallInstanceData, "importFrom" | "name" | "artPath">, InstallInstanceDataReply>(),
  cancelInstallInstance:          io<CancelInstallInstanceData, CancelInstallInstanceDataReply>(),
  updateInstance:                 io<UpdateInstanceData, InstallInstanceDataReply>(),
  uninstallInstance:              io<UninstallInstanceData, UninstallInstanceDataReply>(),
  instanceConfigure:              io<InstanceConfigureData, InstanceConfigureDataReply>(),
  instanceModToggle:              io<InstanceModToggleData, InstanceModToggleDataReply>(),
  instanceBrowse:                 io<Nullable<BrowseInstanceData, "folder">, BrowseInstanceDataReply>(),
  getInstanceFolders:             io<GetInstanceFoldersHandlerRequest, GetInstanceFoldersHandlerReply>(),
  duplicateInstance:              io<DuplicateInstanceHandlerRequest, DuplicateInstanceHandlerReply>(),
  getSettings:                    io<SettingsInfoData, SettingsInfoDataReply>(),
  saveSettings:                   io<SettingsConfigureData, SettingsConfigureDataReply>(),
  modalCallback:                  io<ModalCallbackData, EmptyMessageResponse>(),
  fileHash:                       io<FileHashData, FileHashDataReply>(),
  uploadLogs:                     io<UploadLogsData, UploadLogsDataReply>(),
  getJavas:                       io<GetJavasData, GetJavasDataReply>(),
  instanceMods:                   io<InstanceModsData, InstanceModsDataReply>(),
  pong:                           io<PongLauncherData, EmptyMessageResponse>(),
  ping:                           io<PingLauncherData, EmptyMessageResponse>(),
  messageClient:                  io<MessageClientData, EmptyMessageResponse>(),
  instanceInstallMod:             io<InstanceInstallModData, InstanceInstallModDataReply>(),
  setInstanceArt:                 io<SetInstanceArtData, SetInstanceArtDataReply>(),
  instanceVersionInfo:            io<InstanceVersionInfoData, InstanceVersionInfoDataReply>(),
  instanceGetBackups:             io<InstanceGetBackupsHandlerRequest, InstanceGetBackupsHandlerReply>(),
  instanceRestoreBackup:          io<InstanceRestoreBackupHandlerRequest, InstanceRestoreBackupHandlerReply>(),
  instanceDeleteBackup:           io<InstanceDeleteBackupHandlerRequest, InstanceDeleteBackupHandlerReply>(),
  "profiles.get":                 io<BaseData, GetProfilesHandlerReply>(),
  "profiles.remove":              io<RemoveProfileHandlerData, RemoveProfileHandlerReply>(),
  "profiles.setActiveProfile":    io<SetActiveProfileHandlerData, SetActiveProfileHandlerReply>(),
  "profiles.ms.authenticate":     io<AuthenticateMsProfileHandlerData, AuthenticateMsProfileHandlerReply>(),
  "profiles.refresh":             io<RefreshAuthenticationProfileHandlerData, RefreshAuthenticationProfileHandlerReply>(),
  "profiles.is-valid":            io<AccountIsValidHandlerData, AccountIsValidHandlerReply>(),
  "storage.put":                  io<StoragePutHandlerData, StoragePutHandlerReply>(),
  "storage.get":                  io<StorageGetHandlerData, StorageGetHandlerReply>(),
  "storage.get-all":              io<BaseData, StorageGetAllHandlerReply>(),
  webRequest:                     io<Nullable<WebRequestData, "body">, WebRequestDataResponse>(),
  openDebugTools:                 io<BaseData, EmptyMessageResponse>(),
  instanceOverrideModLoader:      io<InstanceOverrideModLoaderData, InstanceOverrideModLoaderDataReply>(),
  moveInstances:                  io<MoveInstancesHandlerData, MoveInstancesHandlerReply>(),
  "accounts.store-oauth":         io<StoreFtbAccountHandlerData, StoreFtbAccountHandlerReply>(),
  "accounts.get-oauth":           io<BaseData, GetFtbAccountHandlerReply>(),
  "accounts.sign-out":            io<BaseData, SignOutFTBAccountHandlerReply>(),
} satisfies Record<ApiEndpoints, EndpointDefinition<any, any>>;

export type EmptyMessageResponse = {}
export type MessagePayload = typeof endpoints;
