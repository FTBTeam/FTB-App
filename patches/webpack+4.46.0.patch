diff --git a/node_modules/webpack/lib/optimize/SplitChunksPlugin.js b/node_modules/webpack/lib/optimize/SplitChunksPlugin.js
index e7d560b..10e8383 100644
--- a/node_modules/webpack/lib/optimize/SplitChunksPlugin.js
+++ b/node_modules/webpack/lib/optimize/SplitChunksPlugin.js
@@ -22,7 +22,7 @@ const deterministicGroupingForModules = /** @type {function(DeterministicGroupin
 
 const hashFilename = name => {
 	return crypto
-		.createHash("md4")
+		.createHash("md5")
 		.update(name)
 		.digest("hex")
 		.slice(0, 8);
diff --git a/node_modules/webpack/lib/util/createHash.js b/node_modules/webpack/lib/util/createHash.js
index 64de510..143d02f 100644
--- a/node_modules/webpack/lib/util/createHash.js
+++ b/node_modules/webpack/lib/util/createHash.js
@@ -118,6 +118,21 @@ class DebugHash extends Hash {
 	}
 }
 
+function loadCrypto() {
+    const c = require("crypto");
+    const originalCreateHash = c.createHash;
+
+    c.createHash = (...args) => {
+        if (args[0] == "md4") {
+            return originalCreateHash("md5");
+        }
+
+        return originalCreateHash(...args);
+    };
+
+    return c;
+}
+
 /**
  * Creates a hash by name or function
  * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash
@@ -132,6 +147,6 @@ module.exports = algorithm => {
 		case "debug":
 			return new DebugHash();
 		default:
-			return new BulkUpdateDecorator(require("crypto").createHash(algorithm));
+			return new BulkUpdateDecorator(loadCrypto().createHash(algorithm));
 	}
 };
